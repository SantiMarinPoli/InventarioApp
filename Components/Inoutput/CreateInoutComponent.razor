@using Entities
@using Business
@using Entities.Interface

@inject NavigationManager NavManager
    <div>

        <div class="form-group">
            <select class="form-control" @onchange="onChangeWarehouse">
                <option value="">Seleccionar Bodega...</option>
                @foreach (var warehouse in warehouses)
                {
                    <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                }
            </select>
        </div>
        <hr />

        <EditForm Model="oInOut">
            <div class="form-group">
                <label>Producto: </label>
                <InputSelect @bind-Value="oInOut.StorageId" class="form-control">
                    <option value="">Seleccionar producto...</option>
                    @foreach (var storage in storages)
                    {
                        <option value="@storage.StorageId">@storage.Product.ProductName</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label>Cantidad: </label>
                <InputNumber @bind-Value="oInOut.Quantity" class="form-control"></InputNumber>
            </div>

            @*<div class="form-group">
                <label>Fecha Entrada y Salida: </label>
                <InputDate @bind-Value="oInOut.InOutDate" class="form-control"></InputDate>
            </div>*@

            <div class="form-group">
                <label>¿Es una entrada? </label>
                <InputCheckbox @bind-Value="oInOut.IsInput" class="form-control"></InputCheckbox>
            </div>

            <div class="form-group">
                <input type="button" class="form-control btn btn-success" value="@buttonValue" @onclick="SaveInOutPut" />
            </div>
        </EditForm>
        <br />

        @if (message.Contains("actualizado"))
        {
            <div class="alert alert-success text-center">@message</div>
        }
        else if(message != string.Empty)
        {
            <div class="alert alert-danger text-center">@message</div>
        }

    </div>

@code {
    InOutEntity oInOut = new InOutEntity();
    List<StorageEntity> storages = new List<StorageEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message = string.Empty;

    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";

    protected override async Task OnInitializedAsync()
    {
        // storages = B_Storage.StorageList();
        warehouses = B_Warehouse.WarehouseList();
    }

    private void SaveInOutPut()
    {
        oStorage = storages.LastOrDefault(x => x.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if(oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.CRUDStorage(oStorage, IOperator.Update);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.CRUDProduct(oProduct, IOperator.Update);

            message = $"El producto {oProduct.ProductName} a sido actualizado";

            SaveInPutOutPut();
        }
        else
        {
            if(IsBiggerThanZero(oInOut.Quantity,oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.CRUDStorage(oStorage, IOperator.Update);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.CRUDProduct(oProduct, IOperator.Update);

                message = $"El producto {oProduct.ProductName} a sido actualizado";

                SaveInPutOutPut();
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
            }

        }


    }

    private void SaveInPutOutPut()
    {
        oInOut.InOutId = Guid.NewGuid().ToString();
        oInOut.InOutDate = DateTime.Now;
        B_InOut.CRUDInOut(oInOut,IOperator.Create);
        //NavManager.NavigateTo("inoutPut/list");
    }

    private bool IsBiggerThanZero(int quantity,int storageQuantity)
    {
        if(storageQuantity>quantity)
        {
            return true;
        }

        return false;
    }

    private void onChangeWarehouse(ChangeEventArgs e)
    {
        string idWarehouse = e.Value.ToString();

        storages = B_Storage.StorageProductsByWarehouse(idWarehouse);
    }
}
